# -*- coding: utf-8 -*-
"""Assisgnment-17/01/25

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YexW7Q9-qNYnpPZuF-5qifNTb6K6uC37
"""

#Import the module
import os
from google.colab import drive
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
sns.set(color_codes=True)

#mounted the drive
drive.mount('/content/drive')

#Reading the excel file from my drive
df=pd.read_excel('/content/drive/MyDrive/housedata/raw_house_data.xlsx')

"""**Exploratory Data Analysis** or (EDA) is understanding the data sets by summarizing their main characteristics often plotting them visually. This step is very important especially when we arrive at modeling the data in order to apply Machine learning. Plotting in EDA consists of Histograms, Box plot, Scatter plot and many more. It often takes much time to explore the data. Through the process of EDA, we can ask to define the problem statement or definition on our data set which is very important.

Loading the data into dataframe is certainly one of the most important steps in EDA,  as we can see that the value from the data set is comma-separated. So all we have to do is to just read the excel into a data frame and pandas data frame does the job for us.
"""

#Reading the first 5 rows and all the columns
df.head()

"""Checking all the rows and columns in the dataframe using the shape method."""

#Reading the entire rows and columns
df.shape

"""Checking the missing values using pandas isnull method. As we can see there are maximum missing values are in HOA Column,sqrt_ft, kitchen_feature and fireplace, its better to drop the column which has got maximum number of missing values."""

#Identifying the null values
df.isnull().sum()

#Identify the duplicate values
df.duplicated().sum()

"""As per the below graph, we can interpret that the data is normally distributed as it making a curve on latitude attributes."""

mu, sigma = 175, 6
data = np.random.normal(mu, sigma, 10000)

sns.histplot(data, bins=30, kde=True, stat='probability')
plt.xlabel('longitude (latitude)')
plt.ylabel('Probability')
plt.title("Distribution of latitude")
plt.xticks(range(155,200,5))
plt.show()

"""Dropna method has been used for dropping the rows. After dropping 5000 rows 4370 rows are left and 16 columns."""

df.dropna()

"""This step is certainly needed in every EDA because sometimes there would be many columns that we never use in such cases dropping is the only solution.in this case, the column such as kitchen_features and floor covering are irrelevant therefore i dropped for this instance."""

df = df.drop(['kitchen_features', 'floor_covering'], axis=1)
df.head(5)

df.describe()

#checking the data types to convert the dataset as per the business goals.
df.dtypes

"""An outlier is a point or set of points that are different from other points. Sometimes they can be very high or very low. It's often a good idea to detect and remove the outliers. Because outliers are one of the primary reasons for resulting in a less accurate model. Hence it's a good idea to remove them. Often outliers can be seen with visualizations using a box plot. Herein all the plots, you can find some points are outside the box they are none other than outliers."""

sns.boxplot(x=df['bedrooms'])

sns.boxplot(x=df['bathrooms'])

sns.boxplot(x=df['sold_price'])

Q1=df.quantile(0.25)
Q3=df.quantile(0.75)

IQR = Q3-Q1

print(IQR)

"""A histogram is a graphical representation commonly used to visualize the distribution of numerical data.A histogram divides the values within a numerical variable into bins, and counts the number of observations that fall into each bin. By visualizing these binned counts in a columnar way, we can obtain a very immediate and intuitive sense of the distribution of values within a variable."""

df.bedrooms.value_counts().nlargest(40).plot(kind='bar', figsize=(10,5))
plt.title("raw_house_data")
plt.ylabel('zipcode')
plt.xlabel('bedrooms');

"""Scatterplot uses dots to display the data to which represent two different numeric variables on x and y axis.Here is scatterplots are between and bedrooms and squarfeet.. With the plot given below we can easily draw a trend line.


"""

fig, ax = plt.subplots(figsize=(10,6))
ax.scatter(df['bedrooms'], df['sqrt_ft'])
ax.set_xlabel('bedrooms')
ax.set_ylabel('sqrt_ft')
plt.show()

""" A correlation matrix is a table displaying correlation coefficients that measure the strength and direction of relationships between variables.The matrix shows how all the possible pairs of values in a table are related to each other. It is a powerful tool for summarizing a large data set and finding and showing patterns in the data.


"""

plt.figure(figsize=(15,5))
c= df.corr()
sns.heatmap(c,cmap="BrBG",annot=True)
c

"""From the picture below, we can observe the variations in each plot. The plots are in matrix format where the row name represents x axis and column name represents the y axis. The main-diagonal subplots are the univariate histograms distributions for each attribute"""

sns.pairplot(df)

df.to_csv('rawhousedata')